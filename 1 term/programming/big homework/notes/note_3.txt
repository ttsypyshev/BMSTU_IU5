/// Copyright 2022 ttsypyshev <ttsypyshev01@gmail.com>

/// Error: "Process finished with exit code -1073741571 (0xC00000FD)"
//  it is necessary to increase the stack size in the ide settings
//  add to CMakeLists:  MATH(EXPR stack_size "64 * 1024 * 1024") # 64 Mb
//                      set(CMAKE_EXE_LINKER_FLAGS "-Wl,--stack,${stack_size}")
///  Note: but I still couldn't open 1984 (I don't have enough computer power)
//  you can try to run asynchronously

/// A flaw: reading a file with the Russian language does not work
// in this ide it is difficult to fix
// Note: need to test in other IDEs


/*-------------------------------------------------------------------------------------------------------------------*/


#include <stdio.h>
#include <stdlib.h>

/// dictionary size values
// with these values, the program will work only if you increase the stack size to 64mb
#define size_dictionary 100000
#define size_out 1000000
#define size_word 100

/// search for a word in the dictionary
int Find(int in[size_dictionary][size_word], int last_position, int str[size_word], int size) {
    for (int i = 0; i < last_position; ++i) {
        int flag = 1;
        for (int j = 0; j < size; ++j) {
            if (in[i][j] != str[j]) flag = 0;
        }
        // if found, then output the index
        if (flag) return i;
    }
    // if not found, then output -1
    return -1;
}

/// the function decodes the phrase
int **Decompress(int *in, int size_in, int *index) {
    // creating a dictionary (1-255 characters from the ascii table)
    int dictionary[size_dictionary][size_word] = {0}, last_position = 0;;
    for (int i = 1; i < 256; i++) dictionary[last_position++][0] = i;

    // creating a two-dimensional array for output
    // the first level is an array of words, the 2nd level is words
    // we cannot output immediately, because the algorithm refers to the previous output values
    int **out = malloc(size_out * sizeof *out + (size_out * (size_word * sizeof **out)));
    int *offs = &out[size_out];
    for (int i = 0; i < size_out; ++i, offs += size_word) out[i] = offs;
    for (int i = 0; i < size_out; ++i) for (int j = 0; j < size_word; ++j) out[i][j] = 0;
    (*index)++;

    // decoding algorithm
    for (int num = 0; num < size_in; ++num) {
        int tmp[size_word] = {0};
        int size = 0;

        // <tmp> is equal to the previous value of <out>
        for (size = 0; out[(*index) - 1][size] != 0; ++size) tmp[size] = out[(*index) - 1][size];

        // if the encoded word is already in the dictionary
        // then we take the value from the dictionary
        if (in[num] < last_position) tmp[size++] = dictionary[in[num]][0];
            // otherwise from the last output
        else tmp[size++] = out[(*index) - 1][0];

        // if there is no such value in the dictionary, then save
        if (Find(dictionary, last_position, tmp, size) == -1) {
            for (int i = 0; i < size; ++i) dictionary[last_position][i] = tmp[i];
            last_position++;
        }

        // adding values from the <dictionary> to the <out>
        for (int i = 0; i < size_word; ++i) out[*index][i] = dictionary[in[num]][i];
        (*index)++;
    }
    return out;
}

int main() {
    int tmp = 0;
    int *enc = malloc(1 * sizeof(int)), size_enc = 0;
    printf("Enter the encoded text (enter \"0\" to complete the input):\n");
    while (1) {
        scanf("%d", &tmp);
        if (tmp == 0) break;

        // increasing the array with the dictionary
        enc[size_enc++] = tmp;
        enc = realloc(enc, size_enc * sizeof(int));
    }

    // calling the function to decode
    int size_dec = 0;
    int **dec = Decompress(enc, size_enc, &size_dec); /// decompres 1 method

    printf("\nDecoded text:\n");
    for (int i = 0; i < size_out; ++i) { /// decoded output
        for (int j = 0; j < size_word; ++j) {
            if (dec[i][j] != 0) printf("%c", dec[i][j]);
        }
    }

    free(enc);
    free(dec);
    return 0;
}
