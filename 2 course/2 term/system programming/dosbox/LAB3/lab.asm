; Лабораторная работа №3
;Цыпышев Т.А. ИУ5-41 Вар. 20
;===============================================================================
PRGR SEGMENT
	       ASSUME CS:PRGR, DS:DATA	; Устанавливаем соответствие сегментов кода и данных

	BEGIN: 
	       MOV    AX, DATA        	; Загружаем адрес сегмента данных в регистр AX
	       MOV    DS, AX          	; Устанавливаем сегмент данных
	       CALL   CLRSCR          	; Вызываем процедуру очистки экрана

	       MOV    DL, SYMB1       	; Загружаем символ SYMB1 в регистр DL
	       CALL   PUTCH           	; Выводим символ
	       CALL   CLRF            	; Очищаем строку
	       MOV    DL, SYMB2       	; Загружаем символ SYMB2 в регистр DL
	       CALL   PUTCH           	; Выводим символ
	       CALL   CLRF            	; Очищаем строку
	       MOV    DL, SYMB3       	; Загружаем символ SYMB3 в регистр DL
	       CALL   PUTCH           	; Выводим символ
	       CALL   CLRF            	; Очищаем строку

	       MOV    AH, 09H         	; Устанавливаем функцию вывода строки
	       MOV    DX, OFFSET MSG  	; Загружаем адрес сообщения в DX
	       INT    21H             	; Вызываем прерывание для вывода строки

	       CALL   GETCH           	; Ждем нажатия любой клавиши
	       CALL   CLRSCR          	; Очищаем экран

	       MOV    AH, 4CH         	; Устанавливаем функцию завершения программы
	       MOV    AL, 0           	; Устанавливаем код xвозврата 0
	       INT    21H             	; Вызываем прерывание для завершения программы


	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
GETCH PROC
	       MOV    AH, 01H         	; Устанавливаем функцию ввода символа с клавиатуры
	       INT    21H             	; Вызываем прерывание для ввода символа
	       RET                    	; Возвращаемся из процедуры
GETCH ENDP

	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PUTCH PROC
	       MOV    AH, 02H         	; Устанавливаем функцию вывода символа
	       INT    21H             	; Вызываем прерывание для вывода символа
	       RET                    	; Возвращаемся из процедуры
PUTCH ENDP

	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
CLRF PROC
	       MOV    AH, 02H         	; Устанавливаем функцию вывода символа
	       MOV    DL, 10          	; Загружаем символ перевода строки
	       INT    21H             	; Вызываем прерывание для вывода символа
	       MOV    DL, 13          	; Загружаем символ возврата каретки
	       INT    21H             	; Вызываем прерывание для вывода символа
	       RET                    	; Возвращаемся из процедуры
CLRF ENDP

	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
CLRSCR PROC
	       MOV    AX, 02H         	; Устанавливаем функцию очистки экрана
	       INT    10H             	; Вызываем прерывание для очистки экрана
	       RET                    	; Возвращаемся из процедуры
CLRSCR ENDP

PRGR ENDS
;==================================================================================

DATA SEGMENT
	SYMB1 DB 65                          	; Определяем символы
	SYMB2 DB 66
	SYMB3 DB 67
	MSG   DB 'Press any key to exit... $'	; Определяем сообщение
DATA ENDS
;==================================================================================

STK SEGMENT STACK
	    DB 256 DUP (0)	; Объявляем стек
STK ENDS
;==================================================================================

END BEGIN                      ; Завершаем программу
